# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_s3access.ipynb.

# %% auto 0
__all__ = ['read_in_s3', 'find_granule_by_zone', 'find_granule_by_point', 'get_bbox']

# %% ../nbs/00_s3access.ipynb 3
import os
import json


import geopandas as gpd
from shapely.geometry import Point
from shapely.geometry import Polygon

import numpy as np
import xarray as xr
import rioxarray as rxr

import geoviews as gv
import geoviews.feature as gf
import hvplot.pandas

import s3fs

# %% ../nbs/00_s3access.ipynb 5
def read_in_s3(http_url, chunks='auto'):
    ''' does some string formatting from zarr url and returns xarray dataset
    '''

    s3_url = http_url.replace('http','s3')
    s3_url = s3_url.replace('.s3.amazonaws.com','')

    datacube = xr.open_dataset(s3_url, engine='zarr',
                               storage_options={'anon':True},
                               chunks=chunks)
    return datacube
    
def find_granule_by_zone(zone):
    '''returns every url from itslive catalog that corresponds to a granule falling in specified UTM zone
    '''

    catalog = gpd.read_file('https://its-live-data.s3.amazonaws.com/datacubes/catalog_v02.json')

    zone_cat = catalog.loc[catalog['epsg'] == zone]

    return list(zone_cat['zarr_url'].values)

def find_granule_by_point(input_point, label='single_point'):
    '''returns url for the granule (zarr datacube) containing a specified point. point must be passed in epsg:4326
    '''
    catalog = gpd.read_file('https://its-live-data.s3.amazonaws.com/datacubes/catalog_v02.json')

    #make shapely point of input point
    p = gpd.GeoSeries([Point(input_point[0], input_point[1])],crs='EPSG:4326')
    #make gdf of point
    gdf = gdf = gpd.GeoDataFrame({'label': f'{label}', 
                                  'geometry':p})

    #find row of granule 
    granule = catalog.sjoin(gdf, how='inner')

    url = granule['zarr_url'].values[0]
    return url



# %% ../nbs/00_s3access.ipynb 13
def get_bbox(input_xr, epsg = 'None'):
    '''returns geopandas geodataframe of bounding box of xarray object. 
    '''
    #if 'projection' in list(input_xr.attrs.keys()):

    #    proj_var = input_xr.projection
    #    epsg=proj_var
    #else: 
    #    epsg = proj_var
        #print('check name of projection var')
    
    xmin = input_xr.coords['x'].data.min()
    xmax = input_xr.coords['x'].data.max()

    ymin = input_xr.coords['y'].data.min()
    ymax = input_xr.coords['y'].data.max()

    pts_ls = [(xmin, ymin), (xmax, ymin),(xmax, ymax), (xmin, ymax), (xmin, ymin)]

    crs = epsg

    polygon_geom = Polygon(pts_ls)
    polygon = gpd.GeoDataFrame(index=[0], crs=crs, geometry=[polygon_geom]) 

    #polygon = polygon.to_crs('epsg:4326')

    return polygon
    
