# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_mosaic_access.ipynb.

# %% auto 0
__all__ = ['subset_utmzone_write2file', 'read_in_itslive_vars', 'extract_glacier_velocity_ds', 'calc_median_velocity']

# %% ../nbs/01_mosaic_access.ipynb 4
import os
import json

import geopandas as gpd
import numpy as np
import xarray as xr
import pandas as pd
import rioxarray as rxr

import geoviews as gv
import hvplot.pandas
import hvplot.xarray
import matplotlib.pyplot as plt

# %% ../nbs/01_mosaic_access.ipynb 22
def subset_utmzone_write2file(select_zone, select_row):
    
    utm_zone_row = utm_hma.loc[(utm_hma['ROW_'] == select_row)&
                                     (utm_hma['ZONE'] == select_zone)] 
    outpath = f'/home/emmamarshall/Desktop/data/utm_zone{select_zone}_row{select_row}_esri102027.json'
    utm_zone_row.to_file(outpath, driver='GeoJSON')

    return outpath
    

# %% ../nbs/01_mosaic_access.ipynb 30
def gdalwarp_wrapper(var_ls):
    '''uses gdalwarp to clip each var of netcdf by single utm zone/row.
    currently hardcoded for clipping file and output file :( 
    '''

    os.chdir(its_dir)

    #if len(os.listdir(outpath)) == 0:

    for var in var_ls:
            
            #outdir = outpath[-20:-2]
            #outpath = f"{outpath}itslive_{var}_mosaic.nc"
            
            #print(outpath)
        !gdalwarp -cutline /home/emmamarshall/Desktop/data/utm_zone43_rowS_esri102027.json -s_srs ESRI:102027 -t_srs ESRI:102027 -crop_to_cutline -if netCDF -of netCDF 'NETCDF:"HMA_G0120_0000.nc":{var}' '/home/emmamarshall/Desktop/data/itslive_mosaic/utm_zone43_crops/{var}_mosaic.nc'
    else:
        print('dir not empty, are you sure you specified the correct location?')

# %% ../nbs/01_mosaic_access.ipynb 34
def read_in_itslive_vars(path, crs):

    '''takes path to directory where cropped data var objects stored (output of gdalwarp fn)
    '''

    #make list of all files in dir
    ls = os.listdir(path)

    xr_ls = []
    #for each file in dir, read in and rename var 
    for var in range(len(ls)):
        ds = xr.open_dataset(os.path.join(path, ls[var]), chunks='auto')
        ds = ds.rename({'Band1':ls[var].split('_mosaic')[0]})
        xr_ls.append(ds)
        
    ds_allvars = xr.merge(xr_ls)

    ds_allvars.rio.write_crs(crs, inplace=True)
    return ds_allvars

# %% ../nbs/01_mosaic_access.ipynb 45
def extract_glacier_velocity_ds(rgi_gpdf, itslive_ds, rgiid):

    rgi_single = rgi_gpdf.loc[rgi_gpdf['RGIId'] == rgiid]

    ds = itslive_ds.rio.clip(rgi_single.geometry, rgi_single.crs)

    return ds

# %% ../nbs/01_mosaic_access.ipynb 47
def calc_median_velocity(ds):
    med = ds.v.load().median()
    return med #m/y
